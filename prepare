#!/bin/bash

#**************************************************************
# Clean the workspace
#**************************************************************
rm -rf /tmp/latest-* stdout.txt stderr.txt utilities-*.jar

#**************************************************************
# Find the latest version of 'utilities-internal-test'
#**************************************************************
tempdir=$(mktemp -d -t latest-XXXXXXXXXX)
result=$?
if [ ! ${result} == 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    exit 1
fi

currentdir=$(pwd)
result=$?
if [ ! ${result} == 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    exit 1
fi

cd ${tempdir}
result=$?
if [ ! ${result} == 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    exit 1
fi

REPOSITORY_URL="https://server.rsmaxwell.co.uk/archiva/repository"
REPOSITORYID="build"
REPOSITORY="build"
GROUPID="com.rsmaxwell.utilities"
ARTIFACTID="utilities-internal-test"

URL=${REPOSITORY_URL}/${REPOSITORY}/

pom="pom.xml"
cat >${pom} <<EOT
<project>
	<modelVersion>4.0.0</modelVersion>

	<groupId>junk</groupId>
	<artifactId>junk</artifactId>
	<version>0.0.1-SNAPSHOT</version>

	<dependencies>
		<dependency>
			<groupId>${GROUPID}</groupId>
			<artifactId>${ARTIFACTID}</artifactId>
			<version>1</version>
		</dependency>
	</dependencies>

	<repositories>
		<repository>
			<id>${REPOSITORYID}</id>
			<url>${URL}</url>
		</repository>
	</repositories>

</project>
EOT

mvn --batch-mode versions:use-latest-releases 1>stdout.txt 2>stderr.txt
result=$?
if [ ! ${result} == 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "----[ stdout ]--------------------------"
    cat stdout.txt
    echo "----[ stderr ]--------------------------"
    cat stderr.txt
    echo "----------------------------------------"
    exit 1
fi

line=$(grep "<version>" pom.xml | head -n 2 | tail -n 1)
if [ ${#line} == 0 ]; then
    echo "Error: $0[${LINENO}]"
    exit 1
fi

regex="<version>(.*)</version>"
if [[ ! ${line} =~ ${regex} ]]; then
    echo "Error: $0[${LINENO}]"
    exit 1
fi

utilities_internal_test_version="${BASH_REMATCH[1]}"
echo "utilities_internal_test_version: ${utilities_internal_test_version}"

mvn --batch-mode dependency:resolve 1>stdout.txt 2>stderr.txt
result=$?
if [ ! ${result} == 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "----[ stdout ]--------------------------"
    cat stdout.txt
    echo "----[ stderr ]--------------------------"
    cat stderr.txt
    echo "----------------------------------------"
    exit 1
fi

cd ${currentdir}
result=$?
if [ ! ${result} == 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    exit 1
fi

rm -rf ${tempdir}
result=$?
if [ ! ${result} == 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    exit 1
fi

#**************************************************************
# Resolve 'utilities' and its testing addons
#**************************************************************
VERSION="${utilities_internal_test_version}"
PACKAGING="zip"

filename=${HOME}/.m2/repository/${GROUPID//.//}/${ARTIFACTID}/${VERSION}/${ARTIFACTID}-${VERSION}.${PACKAGING}
if [ ! -f ${filename} ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "file not found: ${filename}"
    exit 1
fi

versionjson=$(java -cp ${jarfile} com.rsmaxwell.utilities_test.Version)
result=$?
if [ ! ${result} == 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    exit 1
fi

utilities_version=$(echo ${versionjson} | jq -r .utilities_version)
result=$?
if [ ! ${result} == 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    exit 1
fi

pathname="./version"
cat >${pathname} <<EOT2
export utilities_internal_test_version=${utilities_internal_test_version}
export utilities_version=${utilities_version}
EOT2

#**************************************************************
# Resolve the version of 'utilities' needed for testing
#**************************************************************
GROUPID="com.rsmaxwell.utilities"
ARTIFACTID="utilities"
VERSION="${utilities_version}"
PACKAGING="jar"

mvn --batch-mode dependency:get -Dartifact=${GROUPID}:${ARTIFACTID}:${VERSION} 1>stdout.txt 2>stderr.txt
result=$?
if [ ! ${result} == 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "----[ stdout ]--------------------------"
    cat stdout.txt
    echo "----[ stderr ]--------------------------"
    cat stderr.txt
    echo "----------------------------------------"
    exit 1
fi
